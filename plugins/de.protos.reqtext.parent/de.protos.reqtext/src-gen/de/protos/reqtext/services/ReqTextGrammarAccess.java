/*
 * generated by Xtext 2.9.2
 */
package de.protos.reqtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReqTextGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.RModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsRImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cContentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentsContentParserRuleCall_1_0 = (RuleCall)cContentsAssignment_1.eContents().get(0);
		
		//RModel:
		//	imports+=RImport*
		//	contents+=Content*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=RImport* contents+=Content*
		public Group getGroup() { return cGroup; }
		
		//imports+=RImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//RImport
		public RuleCall getImportsRImportParserRuleCall_0_0() { return cImportsRImportParserRuleCall_0_0; }
		
		//contents+=Content*
		public Assignment getContentsAssignment_1() { return cContentsAssignment_1; }
		
		//Content
		public RuleCall getContentsContentParserRuleCall_1_0() { return cContentsContentParserRuleCall_1_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRMapParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCrossRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Content:
		//	RList | RMap | CrossRef;
		@Override public ParserRule getRule() { return rule; }
		
		//RList | RMap | CrossRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RList
		public RuleCall getRListParserRuleCall_0() { return cRListParserRuleCall_0; }
		
		//RMap
		public RuleCall getRMapParserRuleCall_1() { return cRMapParserRuleCall_1; }
		
		//CrossRef
		public RuleCall getCrossRefParserRuleCall_2() { return cCrossRefParserRuleCall_2; }
	}
	public class RListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.RList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cEntriesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cEntriesIDTerminalRuleCall_2_1_0_0 = (RuleCall)cEntriesAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cEntriesIDTerminalRuleCall_2_1_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//RList:
		//	'List' name=ID ('[' (entries+=ID (',' entries+=ID)*)? ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'List' name=ID ('[' (entries+=ID (',' entries+=ID)*)? ']')?
		public Group getGroup() { return cGroup; }
		
		//'List'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' (entries+=ID (',' entries+=ID)*)? ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(entries+=ID (',' entries+=ID)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//entries+=ID
		public Assignment getEntriesAssignment_2_1_0() { return cEntriesAssignment_2_1_0; }
		
		//ID
		public RuleCall getEntriesIDTerminalRuleCall_2_1_0_0() { return cEntriesIDTerminalRuleCall_2_1_0_0; }
		
		//(',' entries+=ID)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//entries+=ID
		public Assignment getEntriesAssignment_2_1_1_1() { return cEntriesAssignment_2_1_1_1; }
		
		//ID
		public RuleCall getEntriesIDTerminalRuleCall_2_1_1_1_0() { return cEntriesIDTerminalRuleCall_2_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class RMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.RMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntriesRMapEntryParserRuleCall_2_0 = (RuleCall)cEntriesAssignment_2.eContents().get(0);
		
		//RMap:
		//	'Map' name=ID entries+=RMapEntry*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Map' name=ID entries+=RMapEntry*
		public Group getGroup() { return cGroup; }
		
		//'Map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//entries+=RMapEntry*
		public Assignment getEntriesAssignment_2() { return cEntriesAssignment_2; }
		
		//RMapEntry
		public RuleCall getEntriesRMapEntryParserRuleCall_2_0() { return cEntriesRMapEntryParserRuleCall_2_0; }
	}
	public class RMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.RMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueCC_STRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefRMapEntryCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefRMapEntryIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefRMapEntryCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//RMapEntry:
		//	name=ID '=>' value=CC_STRING ('[' ref=[RMapEntry]? ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=>' value=CC_STRING ('[' ref=[RMapEntry]? ']')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//value=CC_STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//CC_STRING
		public RuleCall getValueCC_STRINGTerminalRuleCall_2_0() { return cValueCC_STRINGTerminalRuleCall_2_0; }
		
		//('[' ref=[RMapEntry]? ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//ref=[RMapEntry]?
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[RMapEntry]
		public CrossReference getRefRMapEntryCrossReference_3_1_0() { return cRefRMapEntryCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefRMapEntryIDTerminalRuleCall_3_1_0_1() { return cRefRMapEntryIDTerminalRuleCall_3_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class CrossRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.CrossRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefContentCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefContentIDTerminalRuleCall_1_0_1 = (RuleCall)cRefContentCrossReference_1_0.eContents().get(1);
		
		//CrossRef:
		//	'ref' ref=[Content];
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' ref=[Content]
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//ref=[Content]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Content]
		public CrossReference getRefContentCrossReference_1_0() { return cRefContentCrossReference_1_0; }
		
		//ID
		public RuleCall getRefContentIDTerminalRuleCall_1_0_1() { return cRefContentIDTerminalRuleCall_1_0_1; }
	}
	public class RImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.RImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//RImport:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final RModelElements pRModel;
	private final ContentElements pContent;
	private final RListElements pRList;
	private final RMapElements pRMap;
	private final RMapEntryElements pRMapEntry;
	private final CrossRefElements pCrossRef;
	private final RImportElements pRImport;
	private final TerminalRule tCC_STRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqTextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRModel = new RModelElements();
		this.pContent = new ContentElements();
		this.pRList = new RListElements();
		this.pRMap = new RMapElements();
		this.pRMapEntry = new RMapEntryElements();
		this.pCrossRef = new CrossRefElements();
		this.pRImport = new RImportElements();
		this.tCC_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.protos.reqtext.ReqText.CC_STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.protos.reqtext.ReqText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RModel:
	//	imports+=RImport*
	//	contents+=Content*;
	public RModelElements getRModelAccess() {
		return pRModel;
	}
	
	public ParserRule getRModelRule() {
		return getRModelAccess().getRule();
	}
	
	//Content:
	//	RList | RMap | CrossRef;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//RList:
	//	'List' name=ID ('[' (entries+=ID (',' entries+=ID)*)? ']')?;
	public RListElements getRListAccess() {
		return pRList;
	}
	
	public ParserRule getRListRule() {
		return getRListAccess().getRule();
	}
	
	//RMap:
	//	'Map' name=ID entries+=RMapEntry*;
	public RMapElements getRMapAccess() {
		return pRMap;
	}
	
	public ParserRule getRMapRule() {
		return getRMapAccess().getRule();
	}
	
	//RMapEntry:
	//	name=ID '=>' value=CC_STRING ('[' ref=[RMapEntry]? ']')?;
	public RMapEntryElements getRMapEntryAccess() {
		return pRMapEntry;
	}
	
	public ParserRule getRMapEntryRule() {
		return getRMapEntryAccess().getRule();
	}
	
	//CrossRef:
	//	'ref' ref=[Content];
	public CrossRefElements getCrossRefAccess() {
		return pCrossRef;
	}
	
	public ParserRule getCrossRefRule() {
		return getCrossRefAccess().getRule();
	}
	
	//RImport:
	//	'import' importURI=STRING;
	public RImportElements getRImportAccess() {
		return pRImport;
	}
	
	public ParserRule getRImportRule() {
		return getRImportAccess().getRule();
	}
	
	//terminal CC_STRING:
	//	"'''"->"'''";
	public TerminalRule getCC_STRINGRule() {
		return tCC_STRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
