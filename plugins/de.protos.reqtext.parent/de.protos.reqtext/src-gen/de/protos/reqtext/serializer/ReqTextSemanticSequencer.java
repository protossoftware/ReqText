/*
 * generated by Xtext 2.9.2
 */
package de.protos.reqtext.serializer;

import com.google.inject.Inject;
import de.protos.reqtext.reqText.CrossRef;
import de.protos.reqtext.reqText.RImport;
import de.protos.reqtext.reqText.RList;
import de.protos.reqtext.reqText.RMap;
import de.protos.reqtext.reqText.RMapEntry;
import de.protos.reqtext.reqText.RModel;
import de.protos.reqtext.reqText.ReqTextPackage;
import de.protos.reqtext.services.ReqTextGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ReqTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ReqTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ReqTextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ReqTextPackage.CROSS_REF:
				sequence_CrossRef(context, (CrossRef) semanticObject); 
				return; 
			case ReqTextPackage.RIMPORT:
				sequence_RImport(context, (RImport) semanticObject); 
				return; 
			case ReqTextPackage.RLIST:
				sequence_RList(context, (RList) semanticObject); 
				return; 
			case ReqTextPackage.RMAP:
				sequence_RMap(context, (RMap) semanticObject); 
				return; 
			case ReqTextPackage.RMAP_ENTRY:
				sequence_RMapEntry(context, (RMapEntry) semanticObject); 
				return; 
			case ReqTextPackage.RMODEL:
				sequence_RModel(context, (RModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Content returns CrossRef
	 *     CrossRef returns CrossRef
	 *
	 * Constraint:
	 *     ref=[Content|ID]
	 */
	protected void sequence_CrossRef(ISerializationContext context, CrossRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReqTextPackage.Literals.CROSS_REF__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReqTextPackage.Literals.CROSS_REF__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCrossRefAccess().getRefContentIDTerminalRuleCall_1_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RImport returns RImport
	 *
	 * Constraint:
	 *     importURI=STRING
	 */
	protected void sequence_RImport(ISerializationContext context, RImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReqTextPackage.Literals.RIMPORT__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReqTextPackage.Literals.RIMPORT__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Content returns RList
	 *     RList returns RList
	 *
	 * Constraint:
	 *     (name=ID (entries+=ID entries+=ID*)?)
	 */
	protected void sequence_RList(ISerializationContext context, RList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RMapEntry returns RMapEntry
	 *
	 * Constraint:
	 *     (name=ID value=CC_STRING ref=[RMapEntry|ID]?)
	 */
	protected void sequence_RMapEntry(ISerializationContext context, RMapEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns RMap
	 *     RMap returns RMap
	 *
	 * Constraint:
	 *     (name=ID entries+=RMapEntry*)
	 */
	protected void sequence_RMap(ISerializationContext context, RMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RModel returns RModel
	 *
	 * Constraint:
	 *     ((imports+=RImport+ contents+=Content+) | contents+=Content+)?
	 */
	protected void sequence_RModel(ISerializationContext context, RModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
