/*
 * generated by Xtext 2.10.0
 */
package de.protos.reqtext.serializer;

import com.google.inject.Inject;
import de.protos.reqtext.reqText.RImport;
import de.protos.reqtext.reqText.RModel;
import de.protos.reqtext.reqText.ReqTextPackage;
import de.protos.reqtext.reqText.SpecObject;
import de.protos.reqtext.reqText.State;
import de.protos.reqtext.reqText.Version;
import de.protos.reqtext.services.ReqTextGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ReqTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ReqTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ReqTextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ReqTextPackage.CLASS:
				sequence_Class(context, (de.protos.reqtext.reqText.Class) semanticObject); 
				return; 
			case ReqTextPackage.RIMPORT:
				sequence_RImport(context, (RImport) semanticObject); 
				return; 
			case ReqTextPackage.RMODEL:
				sequence_RModel(context, (RModel) semanticObject); 
				return; 
			case ReqTextPackage.SPEC_OBJECT:
				sequence_SpecObject(context, (SpecObject) semanticObject); 
				return; 
			case ReqTextPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case ReqTextPackage.VERSION:
				sequence_Version(context, (Version) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Class(ISerializationContext context, de.protos.reqtext.reqText.Class semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReqTextPackage.Literals.CLASS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReqTextPackage.Literals.CLASS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RImport returns RImport
	 *
	 * Constraint:
	 *     importURI=STRING
	 */
	protected void sequence_RImport(ISerializationContext context, RImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReqTextPackage.Literals.RIMPORT__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReqTextPackage.Literals.RIMPORT__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RModel returns RModel
	 *
	 * Constraint:
	 *     (imports+=RImport+ | (imports+=RImport+ (states+=State | classes+=Class | objs+=SpecObject)+))?
	 */
	protected void sequence_RModel(ISerializationContext context, RModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpecObject returns SpecObject
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=CC_STRING 
	 *         state=[State|ID] 
	 *         class=[Class|ID] 
	 *         version=Version 
	 *         image=CC_STRING? 
	 *         reference=[SpecObject|ID]? 
	 *         children+=SpecObject*
	 *     )
	 */
	protected void sequence_SpecObject(ISerializationContext context, SpecObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReqTextPackage.Literals.STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReqTextPackage.Literals.STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Version returns Version
	 *
	 * Constraint:
	 *     (major=INT minor=INT)
	 */
	protected void sequence_Version(ISerializationContext context, Version semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReqTextPackage.Literals.VERSION__MAJOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReqTextPackage.Literals.VERSION__MAJOR));
			if (transientValues.isValueTransient(semanticObject, ReqTextPackage.Literals.VERSION__MINOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReqTextPackage.Literals.VERSION__MINOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVersionAccess().getMajorINTTerminalRuleCall_0_0(), semanticObject.getMajor());
		feeder.accept(grammarAccess.getVersionAccess().getMinorINTTerminalRuleCall_2_0(), semanticObject.getMinor());
		feeder.finish();
	}
	
	
}
