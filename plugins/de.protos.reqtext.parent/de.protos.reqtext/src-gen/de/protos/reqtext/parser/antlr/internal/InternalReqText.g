/*
 * generated by Xtext 2.10.0
 */
grammar InternalReqText;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.protos.reqtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.protos.reqtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.protos.reqtext.services.ReqTextGrammarAccess;

}

@parser::members {

 	private ReqTextGrammarAccess grammarAccess;

    public InternalReqTextParser(TokenStream input, ReqTextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RModel";
   	}

   	@Override
   	protected ReqTextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRModel
entryRuleRModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRModelRule()); }
	iv_ruleRModel=ruleRModel
	{ $current=$iv_ruleRModel.current; }
	EOF;

// Rule RModel
ruleRModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRModelAccess().getImportsRImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleRImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"de.protos.reqtext.ReqText.RImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRModelAccess().getStatesStateParserRuleCall_1_0_0());
					}
					lv_states_1_0=ruleState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRModelRule());
						}
						add(
							$current,
							"states",
							lv_states_1_0,
							"de.protos.reqtext.ReqText.State");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRModelAccess().getClassesClassParserRuleCall_1_1_0());
					}
					lv_classes_2_0=ruleClass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRModelRule());
						}
						add(
							$current,
							"classes",
							lv_classes_2_0,
							"de.protos.reqtext.ReqText.Class");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRModelAccess().getObjsSpecObjectParserRuleCall_1_2_0());
					}
					lv_objs_3_0=ruleSpecObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRModelRule());
						}
						add(
							$current,
							"objs",
							lv_objs_3_0,
							"de.protos.reqtext.ReqText.SpecObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSpecObject
entryRuleSpecObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecObjectRule()); }
	iv_ruleSpecObject=ruleSpecObject
	{ $current=$iv_ruleSpecObject.current; }
	EOF;

// Rule SpecObject
ruleSpecObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SpecObject'
		{
			newLeafNode(otherlv_0, grammarAccess.getSpecObjectAccess().getSpecObjectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSpecObjectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecObjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSpecObjectAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='description'
		{
			newLeafNode(otherlv_3, grammarAccess.getSpecObjectAccess().getDescriptionKeyword_3());
		}
		(
			(
				lv_description_4_0=RULE_CC_STRING
				{
					newLeafNode(lv_description_4_0, grammarAccess.getSpecObjectAccess().getDescriptionCC_STRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecObjectRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_4_0,
						"de.protos.reqtext.ReqText.CC_STRING");
				}
			)
		)
		otherlv_5='state'
		{
			newLeafNode(otherlv_5, grammarAccess.getSpecObjectAccess().getStateKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecObjectRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getSpecObjectAccess().getStateStateCrossReference_6_0());
				}
			)
		)
		otherlv_7='classification'
		{
			newLeafNode(otherlv_7, grammarAccess.getSpecObjectAccess().getClassificationKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecObjectRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getSpecObjectAccess().getClassClassCrossReference_8_0());
				}
			)
		)
		otherlv_9='version'
		{
			newLeafNode(otherlv_9, grammarAccess.getSpecObjectAccess().getVersionKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecObjectAccess().getVersionVersionParserRuleCall_10_0());
				}
				lv_version_10_0=ruleVersion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecObjectRule());
					}
					set(
						$current,
						"version",
						lv_version_10_0,
						"de.protos.reqtext.ReqText.Version");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11='image'
			{
				newLeafNode(otherlv_11, grammarAccess.getSpecObjectAccess().getImageKeyword_11_0());
			}
			(
				(
					lv_image_12_0=RULE_CC_STRING
					{
						newLeafNode(lv_image_12_0, grammarAccess.getSpecObjectAccess().getImageCC_STRINGTerminalRuleCall_11_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSpecObjectRule());
						}
						setWithLastConsumed(
							$current,
							"image",
							lv_image_12_0,
							"de.protos.reqtext.ReqText.CC_STRING");
					}
				)
			)
		)?
		(
			otherlv_13='reference'
			{
				newLeafNode(otherlv_13, grammarAccess.getSpecObjectAccess().getReferenceKeyword_12_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSpecObjectRule());
						}
					}
					otherlv_14=RULE_ID
					{
						newLeafNode(otherlv_14, grammarAccess.getSpecObjectAccess().getReferenceSpecObjectCrossReference_12_1_0());
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecObjectAccess().getChildrenSpecObjectParserRuleCall_13_0());
				}
				lv_children_15_0=ruleSpecObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecObjectRule());
					}
					add(
						$current,
						"children",
						lv_children_15_0,
						"de.protos.reqtext.ReqText.SpecObject");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getSpecObjectAccess().getRightCurlyBracketKeyword_14());
		}
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='State'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateAccess().getStateKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Classification'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassificationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionRule()); }
	iv_ruleVersion=ruleVersion
	{ $current=$iv_ruleVersion.current; }
	EOF;

// Rule Version
ruleVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_major_0_0=RULE_INT
				{
					newLeafNode(lv_major_0_0, grammarAccess.getVersionAccess().getMajorINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVersionRule());
					}
					setWithLastConsumed(
						$current,
						"major",
						lv_major_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getVersionAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_minor_2_0=RULE_INT
				{
					newLeafNode(lv_minor_2_0, grammarAccess.getVersionAccess().getMinorINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVersionRule());
					}
					setWithLastConsumed(
						$current,
						"minor",
						lv_minor_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleRImport
entryRuleRImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRImportRule()); }
	iv_ruleRImport=ruleRImport
	{ $current=$iv_ruleRImport.current; }
	EOF;

// Rule RImport
ruleRImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getRImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_STRING
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_CC_STRING : '\'\'\'' ( options {greedy=false;} : . )*'\'\'\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
