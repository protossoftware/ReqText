/*
 * generated by Xtext 2.9.2
 */
grammar InternalReqText;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.protos.reqtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.protos.reqtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.protos.reqtext.services.ReqTextGrammarAccess;

}

@parser::members {

 	private ReqTextGrammarAccess grammarAccess;

    public InternalReqTextParser(TokenStream input, ReqTextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RModel";
   	}

   	@Override
   	protected ReqTextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRModel
entryRuleRModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRModelRule()); }
	iv_ruleRModel=ruleRModel
	{ $current=$iv_ruleRModel.current; }
	EOF;

// Rule RModel
ruleRModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRModelAccess().getImportsRImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleRImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"de.protos.reqtext.ReqText.RImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRModelAccess().getContentsContentParserRuleCall_1_0());
				}
				lv_contents_1_0=ruleContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRModelRule());
					}
					add(
						$current,
						"contents",
						lv_contents_1_0,
						"de.protos.reqtext.ReqText.Content");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	iv_ruleContent=ruleContent
	{ $current=$iv_ruleContent.current; }
	EOF;

// Rule Content
ruleContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getContentAccess().getRListParserRuleCall_0());
		}
		this_RList_0=ruleRList
		{
			$current = $this_RList_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContentAccess().getRMapParserRuleCall_1());
		}
		this_RMap_1=ruleRMap
		{
			$current = $this_RMap_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContentAccess().getCrossRefParserRuleCall_2());
		}
		this_CrossRef_2=ruleCrossRef
		{
			$current = $this_CrossRef_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRList
entryRuleRList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRListRule()); }
	iv_ruleRList=ruleRList
	{ $current=$iv_ruleRList.current; }
	EOF;

// Rule RList
ruleRList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='List'
		{
			newLeafNode(otherlv_0, grammarAccess.getRListAccess().getListKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRListAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRListRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getRListAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					(
						lv_entries_3_0=RULE_ID
						{
							newLeafNode(lv_entries_3_0, grammarAccess.getRListAccess().getEntriesIDTerminalRuleCall_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRListRule());
							}
							addWithLastConsumed(
								$current,
								"entries",
								lv_entries_3_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getRListAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							lv_entries_5_0=RULE_ID
							{
								newLeafNode(lv_entries_5_0, grammarAccess.getRListAccess().getEntriesIDTerminalRuleCall_2_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRListRule());
								}
								addWithLastConsumed(
									$current,
									"entries",
									lv_entries_5_0,
									"org.eclipse.xtext.common.Terminals.ID");
							}
						)
					)
				)*
			)?
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getRListAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleRMap
entryRuleRMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRMapRule()); }
	iv_ruleRMap=ruleRMap
	{ $current=$iv_ruleRMap.current; }
	EOF;

// Rule RMap
ruleRMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Map'
		{
			newLeafNode(otherlv_0, grammarAccess.getRMapAccess().getMapKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRMapAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRMapRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRMapAccess().getEntriesRMapEntryParserRuleCall_2_0());
				}
				lv_entries_2_0=ruleRMapEntry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRMapRule());
					}
					add(
						$current,
						"entries",
						lv_entries_2_0,
						"de.protos.reqtext.ReqText.RMapEntry");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleRMapEntry
entryRuleRMapEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRMapEntryRule()); }
	iv_ruleRMapEntry=ruleRMapEntry
	{ $current=$iv_ruleRMapEntry.current; }
	EOF;

// Rule RMapEntry
ruleRMapEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRMapEntryAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRMapEntryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getRMapEntryAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_CC_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getRMapEntryAccess().getValueCC_STRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRMapEntryRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"de.protos.reqtext.ReqText.CC_STRING");
				}
			)
		)
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getRMapEntryAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRMapEntryRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getRMapEntryAccess().getRefRMapEntryCrossReference_3_1_0());
					}
				)
			)?
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getRMapEntryAccess().getRightSquareBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleCrossRef
entryRuleCrossRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCrossRefRule()); }
	iv_ruleCrossRef=ruleCrossRef
	{ $current=$iv_ruleCrossRef.current; }
	EOF;

// Rule CrossRef
ruleCrossRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ref'
		{
			newLeafNode(otherlv_0, grammarAccess.getCrossRefAccess().getRefKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCrossRefRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getCrossRefAccess().getRefContentCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRImport
entryRuleRImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRImportRule()); }
	iv_ruleRImport=ruleRImport
	{ $current=$iv_ruleRImport.current; }
	EOF;

// Rule RImport
ruleRImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getRImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_STRING
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_CC_STRING : '\'\'\'' ( options {greedy=false;} : . )*'\'\'\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
