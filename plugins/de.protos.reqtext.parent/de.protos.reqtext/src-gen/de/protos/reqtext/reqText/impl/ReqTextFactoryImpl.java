/**
 * generated by Xtext 2.9.2
 */
package de.protos.reqtext.reqText.impl;

import de.protos.reqtext.reqText.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ReqTextFactoryImpl extends EFactoryImpl implements ReqTextFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ReqTextFactory init()
  {
    try
    {
      ReqTextFactory theReqTextFactory = (ReqTextFactory)EPackage.Registry.INSTANCE.getEFactory(ReqTextPackage.eNS_URI);
      if (theReqTextFactory != null)
      {
        return theReqTextFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ReqTextFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReqTextFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ReqTextPackage.RMODEL: return createRModel();
      case ReqTextPackage.CONTENT: return createContent();
      case ReqTextPackage.RLIST: return createRList();
      case ReqTextPackage.RMAP: return createRMap();
      case ReqTextPackage.RMAP_ENTRY: return createRMapEntry();
      case ReqTextPackage.CROSS_REF: return createCrossRef();
      case ReqTextPackage.RIMPORT: return createRImport();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RModel createRModel()
  {
    RModelImpl rModel = new RModelImpl();
    return rModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Content createContent()
  {
    ContentImpl content = new ContentImpl();
    return content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RList createRList()
  {
    RListImpl rList = new RListImpl();
    return rList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RMap createRMap()
  {
    RMapImpl rMap = new RMapImpl();
    return rMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RMapEntry createRMapEntry()
  {
    RMapEntryImpl rMapEntry = new RMapEntryImpl();
    return rMapEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossRef createCrossRef()
  {
    CrossRefImpl crossRef = new CrossRefImpl();
    return crossRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RImport createRImport()
  {
    RImportImpl rImport = new RImportImpl();
    return rImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReqTextPackage getReqTextPackage()
  {
    return (ReqTextPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ReqTextPackage getPackage()
  {
    return ReqTextPackage.eINSTANCE;
  }

} //ReqTextFactoryImpl
