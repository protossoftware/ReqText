/*
 * generated by Xtext 2.9.1
 */
package de.protos.reqtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.protos.reqtext.reqText.RModel

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ReqTextGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("generatedFile.html", generateContents(resource))
	}
	
	def generateContents(Resource resource) {
		val specObjs = (resource.contents.head as RModel).objs
		'''
			<html>
			<head>
			</head>
			<body>
				«FOR specObj : specObjs»
					<h2>«specObjs.indexOf(specObj)» «specObj.name»</h2>
					«specObj.description»</br>
					state: «specObj.state.name»</br>
					classification: «specObj.class_.name»</br>
					«IF specObj.image != null»<img src="«specObj.image»"/>«ENDIF»
					
					«FOR child : specObj.children»
						<h3>«specObjs.indexOf(specObj)».«specObj.children.indexOf(child)» «child.name»</h3>
						«child.description»
						state: «child.state.name»</br>
						classification: «child.class_.name»</br>
						«IF child.image != null»<img src="«child.image»"/>«ENDIF»
					«ENDFOR»
				«ENDFOR»
			</body>
			</html>
		'''
	}
	
}
