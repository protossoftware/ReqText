/*
 * generated by Xtext 2.9.1
 */
package de.protos.reqtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.protos.reqtext.reqText.RModel

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ReqTextGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("generatedFile.html", generateContents(resource))
	}
	
	def generateContents(Resource resource) {
		val specObjs = (resource.contents.head as RModel).objs
		'''
			<html>
			<head>
				<link rel="stylesheet" type="text/css" href="../doc/style/reqtext.css">
			</head>
			<body>
				«FOR specObj : specObjs»
					<h2>«specObj.name»</h2>
					<p><b>Description:</b> «specObj.description»</p>
					<p class="metadata"><b>State:</b> «specObj.state.name»</p>
					<p class="metadata"><b>Classification:</b> «specObj.class_.name»</p>
					«IF specObj.image != null»
						<figure>
							<img src="«specObj.image.url»" alt="«specObj.image.name»"/>
							<figcaption>«specObj.image.name»</figcaption>
						</figure>
					«ENDIF»
					
					«FOR child : specObj.children»
						<h3>«child.name»</h3>
						<p><b>Description:</b> «child.description»</p>
						<p class="metadata"><b>State:</b> «child.state.name»</p>
						<p class="metadata"><b>Classification:</b> «child.class_.name»</p>
						«IF child.image != null»
							<figure>
								<img src="«child.image.url»" alt="«child.image.name»"/>
								<figcaption>«child.image.name»</figcaption>
							</figure>
						«ENDIF»					«ENDFOR»
				«ENDFOR»
			</body>
			</html>
		'''
	}
	
}
