/*
 * generated by Xtext 2.9.2
 */
grammar InternalReqText;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.protos.reqtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.protos.reqtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.protos.reqtext.services.ReqTextGrammarAccess;

}
@parser::members {
	private ReqTextGrammarAccess grammarAccess;

	public void setGrammarAccess(ReqTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRModel
entryRuleRModel
:
{ before(grammarAccess.getRModelRule()); }
	 ruleRModel
{ after(grammarAccess.getRModelRule()); } 
	 EOF 
;

// Rule RModel
ruleRModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRModelAccess().getGroup()); }
		(rule__RModel__Group__0)
		{ after(grammarAccess.getRModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContent
entryRuleContent
:
{ before(grammarAccess.getContentRule()); }
	 ruleContent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule Content
ruleContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContentAccess().getAlternatives()); }
		(rule__Content__Alternatives)
		{ after(grammarAccess.getContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRList
entryRuleRList
:
{ before(grammarAccess.getRListRule()); }
	 ruleRList
{ after(grammarAccess.getRListRule()); } 
	 EOF 
;

// Rule RList
ruleRList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRListAccess().getGroup()); }
		(rule__RList__Group__0)
		{ after(grammarAccess.getRListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRMap
entryRuleRMap
:
{ before(grammarAccess.getRMapRule()); }
	 ruleRMap
{ after(grammarAccess.getRMapRule()); } 
	 EOF 
;

// Rule RMap
ruleRMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRMapAccess().getGroup()); }
		(rule__RMap__Group__0)
		{ after(grammarAccess.getRMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRMapEntry
entryRuleRMapEntry
:
{ before(grammarAccess.getRMapEntryRule()); }
	 ruleRMapEntry
{ after(grammarAccess.getRMapEntryRule()); } 
	 EOF 
;

// Rule RMapEntry
ruleRMapEntry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRMapEntryAccess().getGroup()); }
		(rule__RMapEntry__Group__0)
		{ after(grammarAccess.getRMapEntryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossRef
entryRuleCrossRef
:
{ before(grammarAccess.getCrossRefRule()); }
	 ruleCrossRef
{ after(grammarAccess.getCrossRefRule()); } 
	 EOF 
;

// Rule CrossRef
ruleCrossRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossRefAccess().getGroup()); }
		(rule__CrossRef__Group__0)
		{ after(grammarAccess.getCrossRefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRImport
entryRuleRImport
:
{ before(grammarAccess.getRImportRule()); }
	 ruleRImport
{ after(grammarAccess.getRImportRule()); } 
	 EOF 
;

// Rule RImport
ruleRImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRImportAccess().getGroup()); }
		(rule__RImport__Group__0)
		{ after(grammarAccess.getRImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContentAccess().getRListParserRuleCall_0()); }
		ruleRList
		{ after(grammarAccess.getContentAccess().getRListParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getContentAccess().getRMapParserRuleCall_1()); }
		ruleRMap
		{ after(grammarAccess.getContentAccess().getRMapParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getContentAccess().getCrossRefParserRuleCall_2()); }
		ruleCrossRef
		{ after(grammarAccess.getContentAccess().getCrossRefParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RModel__Group__0__Impl
	rule__RModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRModelAccess().getImportsAssignment_0()); }
	(rule__RModel__ImportsAssignment_0)*
	{ after(grammarAccess.getRModelAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRModelAccess().getContentsAssignment_1()); }
	(rule__RModel__ContentsAssignment_1)*
	{ after(grammarAccess.getRModelAccess().getContentsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group__0__Impl
	rule__RList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getListKeyword_0()); }
	'List'
	{ after(grammarAccess.getRListAccess().getListKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group__1__Impl
	rule__RList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getNameAssignment_1()); }
	(rule__RList__NameAssignment_1)
	{ after(grammarAccess.getRListAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getGroup_2()); }
	(rule__RList__Group_2__0)?
	{ after(grammarAccess.getRListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group_2__0__Impl
	rule__RList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getLeftSquareBracketKeyword_2_0()); }
	'['
	{ after(grammarAccess.getRListAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group_2__1__Impl
	rule__RList__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getGroup_2_1()); }
	(rule__RList__Group_2_1__0)?
	{ after(grammarAccess.getRListAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getRightSquareBracketKeyword_2_2()); }
	']'
	{ after(grammarAccess.getRListAccess().getRightSquareBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RList__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group_2_1__0__Impl
	rule__RList__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getEntriesAssignment_2_1_0()); }
	(rule__RList__EntriesAssignment_2_1_0)
	{ after(grammarAccess.getRListAccess().getEntriesAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getGroup_2_1_1()); }
	(rule__RList__Group_2_1_1__0)*
	{ after(grammarAccess.getRListAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RList__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group_2_1_1__0__Impl
	rule__RList__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getCommaKeyword_2_1_1_0()); }
	','
	{ after(grammarAccess.getRListAccess().getCommaKeyword_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RList__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRListAccess().getEntriesAssignment_2_1_1_1()); }
	(rule__RList__EntriesAssignment_2_1_1_1)
	{ after(grammarAccess.getRListAccess().getEntriesAssignment_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RMap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMap__Group__0__Impl
	rule__RMap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RMap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapAccess().getMapKeyword_0()); }
	'Map'
	{ after(grammarAccess.getRMapAccess().getMapKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMap__Group__1__Impl
	rule__RMap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RMap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapAccess().getNameAssignment_1()); }
	(rule__RMap__NameAssignment_1)
	{ after(grammarAccess.getRMapAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMap__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RMap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapAccess().getEntriesAssignment_2()); }
	(rule__RMap__EntriesAssignment_2)*
	{ after(grammarAccess.getRMapAccess().getEntriesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RMapEntry__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMapEntry__Group__0__Impl
	rule__RMapEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapEntryAccess().getNameAssignment_0()); }
	(rule__RMapEntry__NameAssignment_0)
	{ after(grammarAccess.getRMapEntryAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMapEntry__Group__1__Impl
	rule__RMapEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapEntryAccess().getEqualsSignGreaterThanSignKeyword_1()); }
	'=>'
	{ after(grammarAccess.getRMapEntryAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMapEntry__Group__2__Impl
	rule__RMapEntry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapEntryAccess().getValueAssignment_2()); }
	(rule__RMapEntry__ValueAssignment_2)
	{ after(grammarAccess.getRMapEntryAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMapEntry__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapEntryAccess().getGroup_3()); }
	(rule__RMapEntry__Group_3__0)?
	{ after(grammarAccess.getRMapEntryAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RMapEntry__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMapEntry__Group_3__0__Impl
	rule__RMapEntry__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapEntryAccess().getLeftSquareBracketKeyword_3_0()); }
	'['
	{ after(grammarAccess.getRMapEntryAccess().getLeftSquareBracketKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMapEntry__Group_3__1__Impl
	rule__RMapEntry__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapEntryAccess().getRefAssignment_3_1()); }
	(rule__RMapEntry__RefAssignment_3_1)?
	{ after(grammarAccess.getRMapEntryAccess().getRefAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMapEntry__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMapEntryAccess().getRightSquareBracketKeyword_3_2()); }
	']'
	{ after(grammarAccess.getRMapEntryAccess().getRightSquareBracketKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossRef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossRef__Group__0__Impl
	rule__CrossRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossRef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossRefAccess().getRefKeyword_0()); }
	'ref'
	{ after(grammarAccess.getCrossRefAccess().getRefKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossRef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossRef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossRefAccess().getRefAssignment_1()); }
	(rule__CrossRef__RefAssignment_1)
	{ after(grammarAccess.getCrossRefAccess().getRefAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__0__Impl
	rule__RImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getRImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getImportURIAssignment_1()); }
	(rule__RImport__ImportURIAssignment_1)
	{ after(grammarAccess.getRImportAccess().getImportURIAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RModel__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRModelAccess().getImportsRImportParserRuleCall_0_0()); }
		ruleRImport
		{ after(grammarAccess.getRModelAccess().getImportsRImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__ContentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRModelAccess().getContentsContentParserRuleCall_1_0()); }
		ruleContent
		{ after(grammarAccess.getRModelAccess().getContentsContentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRListAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRListAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__EntriesAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRListAccess().getEntriesIDTerminalRuleCall_2_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRListAccess().getEntriesIDTerminalRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RList__EntriesAssignment_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRListAccess().getEntriesIDTerminalRuleCall_2_1_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRListAccess().getEntriesIDTerminalRuleCall_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMap__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRMapAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRMapAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMap__EntriesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRMapAccess().getEntriesRMapEntryParserRuleCall_2_0()); }
		ruleRMapEntry
		{ after(grammarAccess.getRMapAccess().getEntriesRMapEntryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRMapEntryAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRMapEntryAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRMapEntryAccess().getValueCC_STRINGTerminalRuleCall_2_0()); }
		RULE_CC_STRING
		{ after(grammarAccess.getRMapEntryAccess().getValueCC_STRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMapEntry__RefAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRMapEntryAccess().getRefRMapEntryCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getRMapEntryAccess().getRefRMapEntryIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRMapEntryAccess().getRefRMapEntryIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getRMapEntryAccess().getRefRMapEntryCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossRef__RefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossRefAccess().getRefContentCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCrossRefAccess().getRefContentIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCrossRefAccess().getRefContentIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCrossRefAccess().getRefContentCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__ImportURIAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CC_STRING : '\'\'\'' ( options {greedy=false;} : . )*'\'\'\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
