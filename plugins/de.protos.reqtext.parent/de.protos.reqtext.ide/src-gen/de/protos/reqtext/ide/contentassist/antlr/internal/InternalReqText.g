/*
 * generated by Xtext 2.9.1
 */
grammar InternalReqText;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.protos.reqtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.protos.reqtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.protos.reqtext.services.ReqTextGrammarAccess;

}
@parser::members {
	private ReqTextGrammarAccess grammarAccess;

	public void setGrammarAccess(ReqTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRModel
entryRuleRModel
:
{ before(grammarAccess.getRModelRule()); }
	 ruleRModel
{ after(grammarAccess.getRModelRule()); } 
	 EOF 
;

// Rule RModel
ruleRModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRModelAccess().getGroup()); }
		(rule__RModel__Group__0)
		{ after(grammarAccess.getRModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpecObject
entryRuleSpecObject
:
{ before(grammarAccess.getSpecObjectRule()); }
	 ruleSpecObject
{ after(grammarAccess.getSpecObjectRule()); } 
	 EOF 
;

// Rule SpecObject
ruleSpecObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecObjectAccess().getGroup()); }
		(rule__SpecObject__Group__0)
		{ after(grammarAccess.getSpecObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImage
entryRuleImage
:
{ before(grammarAccess.getImageRule()); }
	 ruleImage
{ after(grammarAccess.getImageRule()); } 
	 EOF 
;

// Rule Image
ruleImage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImageAccess().getGroup()); }
		(rule__Image__Group__0)
		{ after(grammarAccess.getImageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVersion
entryRuleVersion
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVersionAccess().getGroup()); }
		(rule__Version__Group__0)
		{ after(grammarAccess.getVersionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRImport
entryRuleRImport
:
{ before(grammarAccess.getRImportRule()); }
	 ruleRImport
{ after(grammarAccess.getRImportRule()); } 
	 EOF 
;

// Rule RImport
ruleRImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRImportAccess().getGroup()); }
		(rule__RImport__Group__0)
		{ after(grammarAccess.getRImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRModelAccess().getStatesAssignment_1_0()); }
		(rule__RModel__StatesAssignment_1_0)
		{ after(grammarAccess.getRModelAccess().getStatesAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRModelAccess().getClassesAssignment_1_1()); }
		(rule__RModel__ClassesAssignment_1_1)
		{ after(grammarAccess.getRModelAccess().getClassesAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getRModelAccess().getObjsAssignment_1_2()); }
		(rule__RModel__ObjsAssignment_1_2)
		{ after(grammarAccess.getRModelAccess().getObjsAssignment_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RModel__Group__0__Impl
	rule__RModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRModelAccess().getImportsAssignment_0()); }
	(rule__RModel__ImportsAssignment_0)*
	{ after(grammarAccess.getRModelAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRModelAccess().getAlternatives_1()); }
	(rule__RModel__Alternatives_1)*
	{ after(grammarAccess.getRModelAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpecObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__0__Impl
	rule__SpecObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getSpecObjectKeyword_0()); }
	'SpecObject'
	{ after(grammarAccess.getSpecObjectAccess().getSpecObjectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__1__Impl
	rule__SpecObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getNameAssignment_1()); }
	(rule__SpecObject__NameAssignment_1)
	{ after(grammarAccess.getSpecObjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__2__Impl
	rule__SpecObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSpecObjectAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__3__Impl
	rule__SpecObject__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getDescriptionKeyword_3()); }
	'description'
	{ after(grammarAccess.getSpecObjectAccess().getDescriptionKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__4__Impl
	rule__SpecObject__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getDescriptionAssignment_4()); }
	(rule__SpecObject__DescriptionAssignment_4)
	{ after(grammarAccess.getSpecObjectAccess().getDescriptionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__5__Impl
	rule__SpecObject__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getStateKeyword_5()); }
	'state'
	{ after(grammarAccess.getSpecObjectAccess().getStateKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__6__Impl
	rule__SpecObject__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getStateAssignment_6()); }
	(rule__SpecObject__StateAssignment_6)
	{ after(grammarAccess.getSpecObjectAccess().getStateAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__7__Impl
	rule__SpecObject__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getClassificationKeyword_7()); }
	'classification'
	{ after(grammarAccess.getSpecObjectAccess().getClassificationKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__8__Impl
	rule__SpecObject__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getClassAssignment_8()); }
	(rule__SpecObject__ClassAssignment_8)
	{ after(grammarAccess.getSpecObjectAccess().getClassAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__9__Impl
	rule__SpecObject__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getVersionKeyword_9()); }
	'version'
	{ after(grammarAccess.getSpecObjectAccess().getVersionKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__10__Impl
	rule__SpecObject__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getVersionAssignment_10()); }
	(rule__SpecObject__VersionAssignment_10)
	{ after(grammarAccess.getSpecObjectAccess().getVersionAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__11__Impl
	rule__SpecObject__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getGroup_11()); }
	(rule__SpecObject__Group_11__0)?
	{ after(grammarAccess.getSpecObjectAccess().getGroup_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__12__Impl
	rule__SpecObject__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getGroup_12()); }
	(rule__SpecObject__Group_12__0)?
	{ after(grammarAccess.getSpecObjectAccess().getGroup_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__13__Impl
	rule__SpecObject__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getChildrenAssignment_13()); }
	(rule__SpecObject__ChildrenAssignment_13)*
	{ after(grammarAccess.getSpecObjectAccess().getChildrenAssignment_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__14
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group__14__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group__14__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getRightCurlyBracketKeyword_14()); }
	'}'
	{ after(grammarAccess.getSpecObjectAccess().getRightCurlyBracketKeyword_14()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpecObject__Group_11__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group_11__0__Impl
	rule__SpecObject__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group_11__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getImageKeyword_11_0()); }
	'image'
	{ after(grammarAccess.getSpecObjectAccess().getImageKeyword_11_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group_11__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group_11__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getImageAssignment_11_1()); }
	(rule__SpecObject__ImageAssignment_11_1)
	{ after(grammarAccess.getSpecObjectAccess().getImageAssignment_11_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpecObject__Group_12__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group_12__0__Impl
	rule__SpecObject__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group_12__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getReferenceKeyword_12_0()); }
	'reference'
	{ after(grammarAccess.getSpecObjectAccess().getReferenceKeyword_12_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group_12__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpecObject__Group_12__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__Group_12__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecObjectAccess().getReferenceAssignment_12_1()); }
	(rule__SpecObject__ReferenceAssignment_12_1)
	{ after(grammarAccess.getSpecObjectAccess().getReferenceAssignment_12_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Image__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Image__Group__0__Impl
	rule__Image__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Image__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImageAccess().getNameAssignment_0()); }
	(rule__Image__NameAssignment_0)
	{ after(grammarAccess.getImageAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Image__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Image__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Image__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImageAccess().getUrlAssignment_1()); }
	(rule__Image__UrlAssignment_1)
	{ after(grammarAccess.getImageAccess().getUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }
	'State'
	{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_1()); }
	(rule__State__NameAssignment_1)
	{ after(grammarAccess.getStateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassificationKeyword_0()); }
	'Classification'
	{ after(grammarAccess.getClassAccess().getClassificationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getNameAssignment_1()); }
	(rule__Class__NameAssignment_1)
	{ after(grammarAccess.getClassAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getMajorAssignment_0()); }
	(rule__Version__MajorAssignment_0)
	{ after(grammarAccess.getVersionAccess().getMajorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__1__Impl
	rule__Version__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getVersionAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getMinorAssignment_2()); }
	(rule__Version__MinorAssignment_2)
	{ after(grammarAccess.getVersionAccess().getMinorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__0__Impl
	rule__RImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getRImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getImportURIAssignment_1()); }
	(rule__RImport__ImportURIAssignment_1)
	{ after(grammarAccess.getRImportAccess().getImportURIAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RModel__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRModelAccess().getImportsRImportParserRuleCall_0_0()); }
		ruleRImport
		{ after(grammarAccess.getRModelAccess().getImportsRImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__StatesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRModelAccess().getStatesStateParserRuleCall_1_0_0()); }
		ruleState
		{ after(grammarAccess.getRModelAccess().getStatesStateParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__ClassesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRModelAccess().getClassesClassParserRuleCall_1_1_0()); }
		ruleClass
		{ after(grammarAccess.getRModelAccess().getClassesClassParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RModel__ObjsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRModelAccess().getObjsSpecObjectParserRuleCall_1_2_0()); }
		ruleSpecObject
		{ after(grammarAccess.getRModelAccess().getObjsSpecObjectParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSpecObjectAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__DescriptionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getDescriptionCC_STRINGTerminalRuleCall_4_0()); }
		RULE_CC_STRING
		{ after(grammarAccess.getSpecObjectAccess().getDescriptionCC_STRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__StateAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getStateStateCrossReference_6_0()); }
		(
			{ before(grammarAccess.getSpecObjectAccess().getStateStateIDTerminalRuleCall_6_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSpecObjectAccess().getStateStateIDTerminalRuleCall_6_0_1()); }
		)
		{ after(grammarAccess.getSpecObjectAccess().getStateStateCrossReference_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__ClassAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getClassClassCrossReference_8_0()); }
		(
			{ before(grammarAccess.getSpecObjectAccess().getClassClassIDTerminalRuleCall_8_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSpecObjectAccess().getClassClassIDTerminalRuleCall_8_0_1()); }
		)
		{ after(grammarAccess.getSpecObjectAccess().getClassClassCrossReference_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__VersionAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getVersionVersionParserRuleCall_10_0()); }
		ruleVersion
		{ after(grammarAccess.getSpecObjectAccess().getVersionVersionParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__ImageAssignment_11_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getImageImageParserRuleCall_11_1_0()); }
		ruleImage
		{ after(grammarAccess.getSpecObjectAccess().getImageImageParserRuleCall_11_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__ReferenceAssignment_12_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getReferenceSpecObjectCrossReference_12_1_0()); }
		(
			{ before(grammarAccess.getSpecObjectAccess().getReferenceSpecObjectIDTerminalRuleCall_12_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSpecObjectAccess().getReferenceSpecObjectIDTerminalRuleCall_12_1_0_1()); }
		)
		{ after(grammarAccess.getSpecObjectAccess().getReferenceSpecObjectCrossReference_12_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecObject__ChildrenAssignment_13
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecObjectAccess().getChildrenSpecObjectParserRuleCall_13_0()); }
		ruleSpecObject
		{ after(grammarAccess.getSpecObjectAccess().getChildrenSpecObjectParserRuleCall_13_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Image__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImageAccess().getNameCC_STRINGTerminalRuleCall_0_0()); }
		RULE_CC_STRING
		{ after(grammarAccess.getImageAccess().getNameCC_STRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Image__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImageAccess().getUrlCC_STRINGTerminalRuleCall_1_0()); }
		RULE_CC_STRING
		{ after(grammarAccess.getImageAccess().getUrlCC_STRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__MajorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVersionAccess().getMajorINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getVersionAccess().getMajorINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__MinorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVersionAccess().getMinorINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getVersionAccess().getMinorINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__ImportURIAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getRImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CC_STRING : '\'\'\'' ( options {greedy=false;} : . )*'\'\'\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
