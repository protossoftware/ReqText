/*
 * generated by Xtext 2.9.2
 */
package de.protos.reqtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.protos.reqtext.ide.contentassist.antlr.internal.InternalReqTextParser;
import de.protos.reqtext.services.ReqTextGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ReqTextParser extends AbstractContentAssistParser {

	@Inject
	private ReqTextGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalReqTextParser createParser() {
		InternalReqTextParser result = new InternalReqTextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContentAccess().getAlternatives(), "rule__Content__Alternatives");
					put(grammarAccess.getRModelAccess().getGroup(), "rule__RModel__Group__0");
					put(grammarAccess.getRListAccess().getGroup(), "rule__RList__Group__0");
					put(grammarAccess.getRListAccess().getGroup_2(), "rule__RList__Group_2__0");
					put(grammarAccess.getRListAccess().getGroup_2_1(), "rule__RList__Group_2_1__0");
					put(grammarAccess.getRListAccess().getGroup_2_1_1(), "rule__RList__Group_2_1_1__0");
					put(grammarAccess.getRMapAccess().getGroup(), "rule__RMap__Group__0");
					put(grammarAccess.getRMapEntryAccess().getGroup(), "rule__RMapEntry__Group__0");
					put(grammarAccess.getRMapEntryAccess().getGroup_3(), "rule__RMapEntry__Group_3__0");
					put(grammarAccess.getCrossRefAccess().getGroup(), "rule__CrossRef__Group__0");
					put(grammarAccess.getRImportAccess().getGroup(), "rule__RImport__Group__0");
					put(grammarAccess.getRModelAccess().getImportsAssignment_0(), "rule__RModel__ImportsAssignment_0");
					put(grammarAccess.getRModelAccess().getContentsAssignment_1(), "rule__RModel__ContentsAssignment_1");
					put(grammarAccess.getRListAccess().getNameAssignment_1(), "rule__RList__NameAssignment_1");
					put(grammarAccess.getRListAccess().getEntriesAssignment_2_1_0(), "rule__RList__EntriesAssignment_2_1_0");
					put(grammarAccess.getRListAccess().getEntriesAssignment_2_1_1_1(), "rule__RList__EntriesAssignment_2_1_1_1");
					put(grammarAccess.getRMapAccess().getNameAssignment_1(), "rule__RMap__NameAssignment_1");
					put(grammarAccess.getRMapAccess().getEntriesAssignment_2(), "rule__RMap__EntriesAssignment_2");
					put(grammarAccess.getRMapEntryAccess().getNameAssignment_0(), "rule__RMapEntry__NameAssignment_0");
					put(grammarAccess.getRMapEntryAccess().getValueAssignment_2(), "rule__RMapEntry__ValueAssignment_2");
					put(grammarAccess.getRMapEntryAccess().getRefAssignment_3_1(), "rule__RMapEntry__RefAssignment_3_1");
					put(grammarAccess.getCrossRefAccess().getRefAssignment_1(), "rule__CrossRef__RefAssignment_1");
					put(grammarAccess.getRImportAccess().getImportURIAssignment_1(), "rule__RImport__ImportURIAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalReqTextParser typedParser = (InternalReqTextParser) parser;
			typedParser.entryRuleRModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ReqTextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ReqTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
